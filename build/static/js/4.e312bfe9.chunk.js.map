{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.module.css","components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.jsx"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuote","exact","path","to","url"],"mappings":"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","file":"static/js/4.e312bfe9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__toYCq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3c18U\",\"loading\":\"NewCommentForm_loading__24Ww_\",\"control\":\"NewCommentForm_control__1l0bc\",\"actions\":\"NewCommentForm_actions__PQcW8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3JOjG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3u6wi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2D_3S\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.quote}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import {useRef, useEffect} from 'react';\nimport classes from './NewCommentForm.module.css';\nimport useHttp from \"../../hooks/use-http\";\nimport {addComment} from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef();\n\n    const { sendRequest, status, error } = useHttp(addComment);\n\n    const { onAddedComment } = props;\n\n    useEffect(() => {\n        if (status === 'completed' && !error) {\n            onAddedComment();\n        }\n    }, [status, error, onAddedComment]);\n\n    const submitFormHandler = (event) => {\n        event.preventDefault();\n\n        const enteredText = commentTextRef.current.value;\n\n        // optional: Could validate here\n\n        sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === 'pending' && (\n                <div className='centered'>\n                    <LoadingSpinner />\n                </div>\n            )}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor='comment'>Your Comment</label>\n                <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className='btn'>Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n    return (\n        <li className={classes.item}>\n            <p>{props.text}</p>\n        </li>\n    );\n};\n\nexport default CommentItem;","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n    return (\n        <ul className={classes.comments}>\n            {props.comments.map((comment) => (\n                <CommentItem key={comment.id} text={comment.text} />\n            ))}\n        </ul>\n    );\n};\n\nexport default CommentsList;","import {useState, useEffect, useCallback} from 'react';\nimport NewCommentForm from './NewCommentForm';\nimport classes from './Comments.module.css';\nimport useHttp from \"../../hooks/use-http\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport {getAllComments} from \"../../lib/api\";\nimport CommentsList from \"./CommentsList\";\n\nimport {useParams} from 'react-router-dom';\n\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const params = useParams();\n\n    const {quoteId} = params;\n\n    const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [quoteId, sendRequest]);\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    const addedCommentHandler = useCallback(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    let comments;\n\n    if (status === 'pending') {\n        comments = (\n            <div className='centered'>\n                <LoadingSpinner/>\n            </div>\n        );\n    }\n\n    if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n        comments = <CommentsList comments={loadedComments}/>;\n    }\n\n    if (\n        status === 'completed' &&\n        (!loadedComments || loadedComments.length === 0)\n    ) {\n        comments = <p className='centered'>No comments were added yet!</p>;\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className='btn' onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm\n                    quoteId={quoteId}\n                    onAddedComment={addedCommentHandler}\n                />\n            )}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","import React, {Fragment, useEffect} from 'react';\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport {getSingleQuote} from \"../lib/api\";\r\n\r\nimport {useParams, Route, Link, useRouteMatch} from 'react-router-dom';\r\n\r\n\r\n\r\nconst QuoteDetail = () => {\r\n\r\n    const params = useParams();\r\n    const match = useRouteMatch();\r\n\r\n    const {quoteId} = params;\r\n\r\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    },[sendRequest, quoteId]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='centered focused'>{error}</p>\r\n    }\r\n\r\n    if (!loadedQuote) {\r\n        return <p>Undefined quote</p>\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote author={loadedQuote.author} quote={loadedQuote.quote}/>\r\n            {/*<Route exact path={`/quotes/${params.quoteId}/`}>*/}\r\n            <Route exact path={match.path}>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>View Comments</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}